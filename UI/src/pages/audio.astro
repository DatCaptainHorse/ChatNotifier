---
import MainLayout from "../layouts/MainLayout.astro";
---

<MainLayout>
    <div class="w-full h-full flex flex-col justify-center items-center space-y-4">
        <div class="w-3/4 flex flex-col">
            <label id="audio-global-volume-range-label" for="audio-global-volume-range"
                   class="mb-2 text-sm text-white">Global Volume: 75%</label>
            <input id="audio-global-volume-range" type="range" min="0" max="100" value="75"
                   class="w-full h-2 rounded-sm appearance-none cursor-pointer bg-gray-700">
        </div>

        <div class="w-3/4 flex flex-col">
            <label id="audio-sequence-offset-range-label" for="audio-sequence-offset-range"
                   class="mb-2 text-sm text-white">Audio Sequence Offset: -1.0</label>
            <input id="audio-sequence-offset-range" type="range" min="-5" max="0" value="-1" step="0.1"
                   class="w-full h-2 rounded-sm appearance-none cursor-pointer bg-gray-700">
        </div>

        <div class="w-3/4 flex flex-col">
            <label id="audio-max-triggers-range-label" for="audio-max-triggers-range"
                   class="mb-2 text-sm text-white">Max Audio Triggers: 3</label>
            <input id="audio-max-triggers-range" type="range" min="0" max="5" value="3"
                   class="w-full h-2 rounded-sm appearance-none cursor-pointer bg-gray-700">
        </div>

        <button id="audio-stop-all-sounds-btn" class="cn-button">
            Stop All Sounds
        </button>
    </div>
</MainLayout>

<script>
  const cn = window.chatnotifier.instance;
  const globalConfig = JSON.parse(cn.get_config_json());

  const audioGlobalVolumeRange = document.getElementById("audio-global-volume-range") as HTMLInputElement;
  const audioGlobalVolumeRangeLabel = document.getElementById("audio-global-volume-range-label") as HTMLLabelElement;
  if (audioGlobalVolumeRange && audioGlobalVolumeRangeLabel) {
    audioGlobalVolumeRangeLabel.textContent = `Global Volume: ${Math.round(globalConfig.globalAudioVolume * 100)}%`;
    audioGlobalVolumeRange.value = (globalConfig.globalAudioVolume * 100).toString();
    audioGlobalVolumeRange.addEventListener("input", () => {
      audioGlobalVolumeRangeLabel.textContent = `Global Volume: ${audioGlobalVolumeRange.value}%`;
      globalConfig.globalAudioVolume = parseFloat(audioGlobalVolumeRange.value) / 100;
      cn.set_config_json(JSON.stringify(globalConfig));
    });
  }

  const audioSequenceOffsetRange = document.getElementById("audio-sequence-offset-range") as HTMLInputElement;
  const audioSequenceOffsetRangeLabel = document.getElementById("audio-sequence-offset-range-label") as HTMLLabelElement;
  if (audioSequenceOffsetRange && audioSequenceOffsetRangeLabel) {
    audioSequenceOffsetRangeLabel.textContent = `Audio Sequence Offset: ${globalConfig.audioSequenceOffset.toFixed(1)}`;
    audioSequenceOffsetRange.value = globalConfig.audioSequenceOffset.toString();
    audioSequenceOffsetRange.addEventListener("input", () => {
      audioSequenceOffsetRangeLabel.textContent = `Audio Sequence Offset: ${audioSequenceOffsetRange.value}`;
      globalConfig.audioSequenceOffset = parseFloat(audioSequenceOffsetRange.value);
      cn.set_config_json(JSON.stringify(globalConfig));
    });
  }

  const audioMaxTriggersRange = document.getElementById("audio-max-triggers-range") as HTMLInputElement;
  const audioMaxTriggersRangeLabel = document.getElementById("audio-max-triggers-range-label") as HTMLLabelElement;
  if (audioMaxTriggersRange && audioMaxTriggersRangeLabel) {
    audioMaxTriggersRangeLabel.textContent = `Max Audio Triggers: ${globalConfig.maxAudioTriggers}`;
    audioMaxTriggersRange.value = globalConfig.maxAudioTriggers.toString();
    audioMaxTriggersRange.addEventListener("input", () => {
      audioMaxTriggersRangeLabel.textContent = `Max Audio Triggers: ${audioMaxTriggersRange.value}`;
      globalConfig.maxAudioTriggers = parseInt(audioMaxTriggersRange.value);
      cn.set_config_json(JSON.stringify(globalConfig));
    });
  }

  const audioStopAllSoundsBtn = document.getElementById("audio-stop-all-sounds-btn") as HTMLButtonElement;
  if (audioStopAllSoundsBtn) {
    audioStopAllSoundsBtn.addEventListener("click", () => {
      cn.stop_all_sounds();
    });
  }
</script>